from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

TEMPLATE_OPTIONS = {
    "clean": "–ß–∏—Å—Ç–æ –∏ —É—é—Ç–Ω–æ",
    "location": "–£–¥–æ–±–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è",
    "staff": "–í–µ–∂–ª–∏–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª",
    "food": "–í–∫—É—Å–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫",
    "quiet": "–¢–∏—Ö–æ –∏ —Å–ø–æ–∫–æ–π–Ω–æ",
    "view": "–ö—Ä–∞—Å–∏–≤—ã–π –≤–∏–¥",
    "wifi": "–ë—ã—Å—Ç—Ä—ã–π Wi-Fi",
    "service": "–û—Ç–ª–∏—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å",
    "price": "–•–æ—Ä–æ—à–µ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω–∞/–∫–∞—á–µ—Å—Ç–≤–æ",
    "transport": "–£–¥–æ–±–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
    "bed": "–£–¥–æ–±–Ω–∞—è –∫—Ä–æ–≤–∞—Ç—å",
    "bathroom": "–ß–∏—Å—Ç–∞—è –≤–∞–Ω–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞",
    "parking": "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞",
    "checkin": "–ë—ã—Å—Ç—Ä–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
    "interior": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—å–µ—Ä",
    "security": "–ß—É–≤—Å—Ç–≤—É–µ—Ç—Å—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
    "temperature": "–ö–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –Ω–æ–º–µ—Ä–µ",
    "noise": "–•–æ—Ä–æ—à–∞—è —à—É–º–æ–∏–∑–æ–ª—è—Ü–∏—è",
    "tv": "–†–∞–±–æ—Ç–∞—é—â–∏–π —Ç–µ–ª–µ–≤–∏–∑–æ—Ä",
    "furniture": "–£–¥–æ–±–Ω–∞—è –º–µ–±–µ–ª—å"
}

TEMPLATE_KEYS = list(TEMPLATE_OPTIONS.keys())
TEMPLATES_PER_PAGE = 5


def rating_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"{i} ‚≠êÔ∏è", callback_data=f"rating:{i}")]
            for i in range(1, 6)
        ]
    )


def review_templates_keyboard(selected: list[str], page: int) -> InlineKeyboardMarkup:
    start = page * TEMPLATES_PER_PAGE
    end = start + TEMPLATES_PER_PAGE
    sliced_keys = TEMPLATE_KEYS[start:end]

    keyboard = []

    # üîù –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="template_page:prev"))
    if end < len(TEMPLATE_KEYS):
        nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data="template_page:next"))
    if nav_buttons:
        keyboard.append(nav_buttons)

    # ‚úÖ –®–∞–±–ª–æ–Ω—ã
    for key in sliced_keys:
        label = TEMPLATE_OPTIONS[key]
        prefix = "‚úÖ " if key in selected else ""
        keyboard.append([
            InlineKeyboardButton(
                text=f"{prefix}{label}",
                callback_data=f"template_toggle:{key}"
            )
        ])

    # ‚¨áÔ∏è –ö–Ω–æ–ø–∫–∞ "–ì–æ—Ç–æ–≤–æ" ‚Äî –≤—Å–µ–≥–¥–∞ –≤–Ω–∏–∑—É
    keyboard.append([
        InlineKeyboardButton(text="‚úèÔ∏è –ì–æ—Ç–æ–≤–æ", callback_data="template_done")
    ])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)